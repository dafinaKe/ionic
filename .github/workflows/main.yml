name: Ionic Angular CI/CD with Docker and Kubernetes

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
  pull_request:
    branches:
      - main  # Trigger the workflow on pull request to the main branch

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'  # Use the Node.js version compatible with your Ionic app

    - name: Install dependencies
      run: npm install

    - name: Build Ionic App
      run: npm run build -- --prod  # Build the app for production

    - name: Build Docker image
      run: |
        docker build -t my-ionic-app .  # Build the Docker image using your Dockerfile
        docker tag my-ionic-app:latest your-dockerhub-username/my-ionic-app:latest  # Tag the image

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image to DockerHub
      run: |
        docker push your-dockerhub-username/my-ionic-app:latest  # Push the Docker image to DockerHub

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Only run this job after the build job is complete

    steps:
    - name: Set up Kubernetes CLI
      uses: azure/setup-kubectl@v2
      with:
        version: 'v1.22.0'  # Specify your Kubernetes CLI version

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBERNETES_CONFIG }}" > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml

    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/my-ionic-app my-ionic-app=your-dockerhub-username/my-ionic-app:latest  # Update the Kubernetes deployment with the new Docker image
        kubectl rollout status deployment/my-ionic-app  # Check if the deployment was successful
